;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Name:			Brandon Stanley
; Student Number:	0495470
; Course:		CS2476
; Assignment:		Combining C and Asm
; Date Created:		March 24, 2014
; Last Modified:	March 24, 2014
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Purpose:
;	To use call assembly code using C code to produce an effect.
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Notes:
;
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section .data


section .text
        global modding_function

modding_function:
	MOV	eax,	[esp+4]   
	;move(copy)  eax...memory register...not sure what that means exactly
	AND	eax,	0xFFFF ;mask all but final 16 bits
	;logical and. im guessing the function performs move on esp+4 whatever that is
	; and also moves/copies some bits 0xFFFF. which i dont know what is. hex i guess
	
	;reverse EAX
	MOV	ecx,	0 
	MOV	ebx,	0
	;moves/copies 0 into some memory register, no idea what ecx or ebx mean,
	;other than that they are memory registers
reverse_loop:
	SHR	ax,	1
	;shift logical right, shifts bits right by one? 
	; i dont know what that meansa or accomplishes
	JNC	not_one
	;jump if not above, not_one is a function call to below?+
	ADD	bx,	1 ;carry was generated by shift
	;add 1 to bx...is bx a memory register?
not_one:	;no carry generated
	INC	ecx ;check if there's more bits to deal with
	;incerement ecx...i guess whatver is stored in ecx 
	;(which is a memory register?) by ...one?
	CMP	ecx,	16
	;compare 16 to whatever is stored in ecx?
	JZ	exit_mask
	;jump if zero, does that "jump" if exit_mask returns zero?
	;or jump to exit_mask if something is zero?
	SHL	bx,	1 ;there's at least one more bit coming, so shift bits
	;shift logical left, shifts whatever is in bx by 1? 
	JMP	reverse_loop
	;jumps to revers_loop function?
exit_mask:
	MOV	EAX,	EBX
	;moves/copies ebx into eax
	;i guess those are like variables stored in memory, 
	;and its copying one into the other?
	RET
	;return from subroutine...
	;returns to calling function...not_one?





